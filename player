#Quinten white

#player class

#imports
import pygame as pg
from settings import *
import random

class Player(pg.sprite.Sprite):
    def __init__(self,sprite,bullet_sprite,all_sprites,bullet_group,shoot_fx):
        super(Player, self).__init__()
        self.image = sprite
        self.image = pg.transform.scale(self.image,(50, 40))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.radius = (self.rect.width*.8)/2
        #pg.draw.circle(self.image, RED, self.rect.center, self.radius)
        self.rect.centerx=WIDTH/2
        self.rect.bottom = HEIGHT - self.rect.height
        self.speed_x = 0
        self.speed_y = 0
        self.moveSpeed = 8
        self.sheild = 100
        self.fuel = 100
        self.shoot_delay = 250
        self.last_shot = pg.time.get_ticks()
        self.all_sprites = all_sprites
        self.bullet_group = bullet_group
        self.bullet_img = bullet_sprite
        self.shoot_fx = shoot_fx
        self.gun_power = 0

    def shoot(self,sprite,all_sprites,bullet_group):
        now = pg.time.get_ticks()
        if now - self.last_shot> self.shoot_delay:
            self.last_shot = now
            self.shoot_fx.play()
            if self.gun_power == 0:
                bullet = Bullet(self.rect.centerx, self.rect.top - 5 ,sprite,all_sprites, bullet_group)
            elif self.gun_power == 1:
                self.shoot_delay = 175
                bullet = Bullet(self.rect.centerx, self.rect.top - 5, sprite, all_sprites, bullet_group)
            elif self.gun_power == 2:
                self.shoot_delay = 250
                bullet = Bullet(self.rect.left +2, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.right-2, self.rect.top - 3, sprite, all_sprites, bullet_group)
            elif self.gun_power == 3:
                self.shoot_delay = 250
                bullet = Bullet(self.rect.left +2, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.right-2, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.centerx, self.rect.top - 3, sprite, all_sprites, bullet_group)
            elif self.gun_power == 4:
                self.shoot_delay = 275
                bullet = Bullet(self.rect.left + 2, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.right - 2, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.centerx, self.rect.top - 3, sprite, all_sprites, bullet_group)
            elif self.gun_power == 5:
                self.shoot_delay = 100
                bullet = Bullet(self.rect.left + 2, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.right - 2, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.centerx, self.rect.top +3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.centerx, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.left + 2, self.rect.top - 3, sprite, all_sprites, bullet_group)
                bullet = Bullet(self.rect.right - 2, self.rect.top - 3, sprite, all_sprites, bullet_group)



    def update(self):
        #SETS SPEED TO 0
        self.speed_x = 0
        #player movement

        keystate = pg.key.get_pressed()
        if self.fuel>0:
            if keystate[pg.K_LEFT] or keystate[pg.K_a]:
                self.speed_x = -self.moveSpeed
                self.fuel-=.25
            if keystate[pg.K_RIGHT] or keystate[pg.K_d]:
                self.speed_x = self.moveSpeed
                self.fuel -= .5
        if keystate[pg.K_SPACE]:
            self.shoot(self.bullet_img,self.all_sprites,self.bullet_group)
            #bind player to screem
        if self.rect.right > WIDTH:
            self.rect.right  = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0
            #UPDATE POSITION
        self.rect.centerx += self.speed_x

    def take_damage(self,hit):
        self.sheild -= hit.radius
        self.gun_down()
    def die(self):
        self.lives -= 1
        self.hide()
        self.sheild = 100
        self.gun_down()
    def hide(self):
        self.hidden = True


    def addShield(self,amount):
        self.sheild += amount
        if self.sheild >100:
            self.sheild = 100


    def gun_up(self):
        print("test")
        self.gun_power += 1
        if self.gun_power<0:
            self.gun_power = 0
        if self.gun_power >5:
            self.gun_power=5


    def gun_down(self):
        self.gun_power= 0
        self.shoot_delay = 250
    def add_fuel(self):
        print(self.fuel)
        self.fuel += 25
        print(self.fuel)





class Bullet(pg.sprite.Sprite):
    def __init__(self,x,y,sprite,all_sprites,bullet_group,speed_x = 0):
        super(Bullet, self).__init__()

        self.image = sprite
        self.image = pg.transform.scale(self.image, (10,20))
        self.image.set_colorkey(BLACK)

        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.speed_y = -12
        self.speed_x = speed_x
        all_sprites.add(self)
        bullet_group.add(self)

    def update(self):
        self.rect.centery += self.speed_y
        self.rect.centerx += self.speed_x
        if self.rect.bottom < 5:
            self.kill()
